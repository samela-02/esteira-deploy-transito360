@Library('transito360-library') _ // Nome da Shared Library

pipeline {
    agent any

    parameters {
        string(name: 'CIDADE', defaultValue: 'lem', description: 'Cidade de destino (recebido do orquestrador).')
        string(name: 'VERSAO', defaultValue: 'develop', description: 'Branch ou tag (recebido do orquestrador).')
    }

    stages {
        stage('Checkout Código Fonte') {
            steps {
                cleanWs()
                // O Jenkins baixa o código da Atena API na versão especificada
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: params.VERSAO]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/tivic-pdi/atena-api.git',
                        credentialsId: 'github-token'
                    ]]
                ])
            }
        }
        stage('Deploy para a Cidade') {
            steps {
                script {
                    // ID da credencial do .env da cidade específica
                    def envCredentialId = "transito360-atena-api-env-${params.CIDADE}"
                    
                    // Carrega o arquivo .env da cidade para ler o host remoto
                    withCredentials([file(credentialsId: envCredentialId, variable: 'ENV_FILE')]) {
                        def envProps = readProperties file: ENV_FILE
                        def remoteHost = envProps.REMOTE_HOST

                        // Validação para garantir que o remoteHost foi encontrado
                        if (!remoteHost) {
                            error("ERRO: O parâmetro 'REMOTE_HOST' não foi encontrado no arquivo .env da credencial '${envCredentialId}'.")
                        }

                        // Monta o mapa de configuração completo para a Shared Library
                        def config = [
                            cidade: params.CIDADE,
                            servico: 'atena-api', 
                            sshCredentialId: 'ssh-cred-id',
                            envCredentialId: envCredentialId,
                            remoteHost: remoteHost
                        ]

                        // Chama a função de deploy genérica a partir da raiz do workspace
                        deployTools.deployService(config)
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}

